openapi: 3.0.4
info:
  title: Zerve API
  description: >
    API RESTful pour le MVP **Zerve** — Réservation de tables, commandes QR code, et back-office d'établissements.
    Modèle aligné sur le DDL PostgreSQL "pure schema only".
  termsOfService: https://zerve.app/terms
  contact:
    email: api@zerve.app
  license:
    name: Proprietary
    url: https://zerve.app/license
  version: 1.0.0
externalDocs:
  description: Documentation produit
  url: https://zerve.app/docs
servers:
  - url: https://api.zerve.app/v1
    description: Production
  - url: https://staging.api.zerve.app/v1
    description: Staging
tags:
  - name: Auth
    description: Authentification basique par API key
  - name: Users
    description: Gestion des utilisateurs
  - name: Nightclubs
    description: Établissements et paramètres
  - name: Tables
    description: Plan de salle & tables
  - name: Products
    description: Catalogue produits & catégories
  - name: Reservations
    description: Réservations & invités
  - name: Orders
    description: Commandes QR code
  - name: Payments
    description: Paiements
  - name: Notifications
    description: Notifications in-app
  - name: Dashboard
    description: Back-office établissement

security:
  - api_key: []

paths:

  ############################
  # AUTH (API key simple)
  ############################
  /auth/ping:
    get:
      tags: [Auth]
      summary: Vérifier l'accès API
      description: Retourne un pong si l'API key est valide.
      responses:
        '200':
          description: OK

  ############################
  # USERS
  ############################
  /users/me:
    get:
      tags: [Users]
      summary: Profil de l'utilisateur connecté
      responses:
        '200':
          description: Profil utilisateur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags: [Users]
      summary: Mettre à jour le profil connecté
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateInput'
      responses:
        '200':
          description: Profil mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      tags: [Users]
      summary: Obtenir un utilisateur par ID (admin/staff)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Utilisateur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404': { description: Not found }
    delete:
      tags: [Users]
      summary: Supprimer un utilisateur (admin)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '204':
          description: Supprimé

  ############################
  # NIGHTCLUBS
  ############################
  /nightclubs:
    get:
      tags: [Nightclubs]
      summary: Liste des établissements
      security: []   # public
      parameters:
        - in: query
          name: city
          schema: { type: string }
        - in: query
          name: lat
          schema: { type: number, format: double }
        - in: query
          name: lng
          schema: { type: number, format: double }
      responses:
        '200':
          description: Liste des nightclubs
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Nightclub' }
    post:
      tags: [Nightclubs]
      summary: Créer un établissement
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/NightclubCreateInput' }
      responses:
        '201':
          description: Créé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Nightclub' }

  /nightclubs/{id}:
    get:
      tags: [Nightclubs]
      summary: Détails d’un établissement
      security: []  # public
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Nightclub
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Nightclub' }
        '404': { description: Not found }
    put:
      tags: [Nightclubs]
      summary: Mettre à jour un établissement
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/NightclubUpdateInput' }
      responses:
        '200':
          description: Mis à jour
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Nightclub' }
    delete:
      tags: [Nightclubs]
      summary: Supprimer un établissement
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '204': { description: Supprimé }

  /nightclubs/{id}/rules:
    get:
      tags: [Nightclubs]
      summary: Récupérer les règles de réservation
      security: []  # public (lecture)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Règles
          content:
            application/json:
              schema: { $ref: '#/components/schemas/NightclubRule' }
    put:
      tags: [Nightclubs]
      summary: Mettre à jour les règles de réservation
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/NightclubRuleUpdateInput' }
      responses:
        '200':
          description: Mis à jour
          content:
            application/json:
              schema: { $ref: '#/components/schemas/NightclubRule' }

  /nightclubs/{id}/hours:
    get:
      tags: [Nightclubs]
      summary: Horaires d’ouverture
      security: []  # public
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Horaires
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/NightclubOpeningHour' }
    put:
      tags: [Nightclubs]
      summary: Mettre à jour les horaires
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items: { $ref: '#/components/schemas/NightclubOpeningHourInput' }
      responses:
        '200':
          description: Mis à jour

  ############################
  # TABLES
  ############################
  /nightclubs/{id}/tables:
    get:
      tags: [Tables]
      summary: Liste des tables d’un club avec statut
      security: []  # public
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Tables du club
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Table' }
    post:
      tags: [Tables]
      summary: Ajouter une table au club
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TableCreateInput' }
      responses:
        '201':
          description: Créée
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Table' }

  /tables/{id}:
    get:
      tags: [Tables]
      summary: Détail d’une table
      security: []  # public
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Table
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Table' }
    put:
      tags: [Tables]
      summary: Mettre à jour une table
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TableUpdateInput' }
      responses:
        '200':
          description: Mis à jour
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Table' }
    delete:
      tags: [Tables]
      summary: Supprimer une table
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '204': { description: Supprimée }

  ############################
  # PRODUCTS & CATEGORIES
  ############################
  /nightclubs/{id}/categories:
    get:
      tags: [Products]
      summary: Liste des catégories du club
      security: []  # public
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Catégories
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/ProductCategory' }
    post:
      tags: [Products]
      summary: Créer une catégorie
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductCategoryCreateInput' }
      responses:
        '201':
          description: Créée
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProductCategory' }

  /categories/{categoryId}:
    put:
      tags: [Products]
      summary: Mettre à jour une catégorie
      parameters:
        - in: path
          name: categoryId
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductCategoryUpdateInput' }
      responses:
        '200':
          description: Mis à jour
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProductCategory' }
    delete:
      tags: [Products]
      summary: Supprimer une catégorie
      parameters:
        - in: path
          name: categoryId
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '204': { description: Supprimée }

  /nightclubs/{id}/products:
    get:
      tags: [Products]
      summary: Liste des produits disponibles d’un club
      security: []  # public
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
        - in: query
          name: available
          schema: { type: boolean, default: true }
      responses:
        '200':
          description: Produits
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Product' }
    post:
      tags: [Products]
      summary: Créer un produit
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductCreateInput' }
      responses:
        '201':
          description: Créé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }

  /products/{productId}:
    get:
      tags: [Products]
      summary: Détail d’un produit
      security: []  # public
      parameters:
        - in: path
          name: productId
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Produit
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }
    put:
      tags: [Products]
      summary: Mettre à jour un produit
      parameters:
        - in: path
          name: productId
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductUpdateInput' }
      responses:
        '200':
          description: Mis à jour
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }
    delete:
      tags: [Products]
      summary: Supprimer un produit
      parameters:
        - in: path
          name: productId
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '204': { description: Supprimé }

  ############################
  # RESERVATIONS
  ############################
  /reservations:
    get:
      tags: [Reservations]
      summary: Liste des réservations de l’utilisateur
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, confirmed, to_finalize, cancelled, completed]
      responses:
        '200':
          description: Réservations
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Reservation' }
    post:
      tags: [Reservations]
      summary: Créer une réservation
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ReservationCreateInput' }
      responses:
        '201':
          description: Créée
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Reservation' }

  /reservations/{id}:
    get:
      tags: [Reservations]
      summary: Détail d’une réservation
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Réservation
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Reservation' }
        '404': { description: Not found }
    put:
      tags: [Reservations]
      summary: Modifier une réservation (avant confirmation)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ReservationUpdateInput' }
      responses:
        '200':
          description: Mis à jour
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Reservation' }
    delete:
      tags: [Reservations]
      summary: Annuler une réservation
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '204': { description: Supprimée }

  /reservations/{id}/status:
    put:
      tags: [Reservations]
      summary: Changer le statut d’une réservation (manager)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [pending, confirmed, to_finalize, cancelled, completed]
      responses:
        '200':
          description: Statut mis à jour

  /reservations/{id}/guests:
    get:
      tags: [Reservations]
      summary: Liste des invités d’une réservation
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Invités
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/ReservationGuest' }
    post:
      tags: [Reservations]
      summary: Ajouter des invités
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items: { $ref: '#/components/schemas/ReservationGuestCreateInput' }
      responses:
        '201':
          description: Invités ajoutés

  /reservations/{id}/guests/{guestId}:
    put:
      tags: [Reservations]
      summary: Mettre à jour un invité (statut / montants)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
        - in: path
          name: guestId
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ReservationGuestUpdateInput' }
      responses:
        '200':
          description: Mis à jour
    delete:
      tags: [Reservations]
      summary: Retirer un invité
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
        - in: path
          name: guestId
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '204': { description: Supprimé }

  /reservations/{id}/items:
    get:
      tags: [Reservations]
      summary: Liste des produits d’une réservation (panier)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Items
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/ReservationItem' }
    post:
      tags: [Reservations]
      summary: Ajouter un produit au panier de réservation
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ReservationItemCreateInput' }
      responses:
        '201':
          description: Ajouté

  /reservations/{id}/items/{itemId}:
    put:
      tags: [Reservations]
      summary: Modifier la quantité d’un item
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
        - in: path
          name: itemId
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ReservationItemUpdateInput' }
      responses:
        '200':
          description: Mis à jour
    delete:
      tags: [Reservations]
      summary: Supprimer un item du panier
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
        - in: path
          name: itemId
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '204': { description: Supprimé }

  ############################
  # ORDERS (QR)
  ############################
  /orders:
    post:
      tags: [Orders]
      summary: Créer une commande (QR code)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/OrderCreateInput' }
      responses:
        '201':
          description: Créée
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Order' }

  /orders/{id}:
    get:
      tags: [Orders]
      summary: Détail d’une commande
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Commande
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Order' }
    put:
      tags: [Orders]
      summary: Mettre à jour le statut d’une commande
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [pending, preparing, served, paid, cancelled]
      responses:
        '200':
          description: Statut mis à jour
    delete:
      tags: [Orders]
      summary: Annuler une commande
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '204': { description: Supprimée }

  /tables/{id}/orders:
    get:
      tags: [Orders]
      summary: Liste des commandes en cours d’une table (staff)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Commandes
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Order' }

  ############################
  # PAYMENTS
  ############################
  /payments:
    post:
      tags: [Payments]
      summary: Créer un paiement (réservation ou commande)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PaymentCreateInput' }
      responses:
        '201':
          description: Paiement créé
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Payment' }

  /payments/{id}:
    get:
      tags: [Payments]
      summary: Détail d’un paiement
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Paiement
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Payment' }

  /reservations/{id}/payments:
    get:
      tags: [Payments]
      summary: Liste des paiements d’une réservation
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Paiements
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Payment' }

  ############################
  # NOTIFICATIONS
  ############################
  /notifications:
    get:
      tags: [Notifications]
      summary: Liste des notifications utilisateur
      responses:
        '200':
          description: Notifications
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Notification' }

  /notifications/{id}/read:
    put:
      tags: [Notifications]
      summary: Marquer une notification comme lue
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: OK

  ############################
  # DASHBOARD (Back-office)
  ############################
  /dashboard/reservations:
    get:
      tags: [Dashboard]
      summary: Réservations en attente / confirmées du club connecté
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, confirmed, to_finalize, cancelled, completed]
      responses:
        '200':
          description: Réservations
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Reservation' }

  /dashboard/orders:
    get:
      tags: [Dashboard]
      summary: Historique des commandes du club connecté
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, preparing, served, paid, cancelled]
      responses:
        '200':
          description: Commandes
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Order' }

components:
  securitySchemes:
    api_key:
      type: apiKey
      name: X-API-Key
      in: header

  schemas:

    Error:
      type: object
      required: [code, message]
      properties:
        code: { type: string }
        message: { type: string }

    Role:
      type: object
      properties:
        id: { type: integer, format: int64 }
        name: { type: string, example: user }
        description: { type: string }

    User:
      type: object
      properties:
        id: { type: integer, format: int64 }
        firstname: { type: string }
        lastname: { type: string }
        email: { type: string, format: email }
        tel: { type: string }
        gender: { type: string, enum: [male, female, other] }
        birthdate: { type: string, format: date }
        roleId: { type: integer, format: int64 }
        profileImage: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    UserUpdateInput:
      type: object
      properties:
        firstname: { type: string }
        lastname: { type: string }
        tel: { type: string }
        gender: { type: string, enum: [male, female, other] }
        profileImage: { type: string }

    Nightclub:
      type: object
      properties:
        id: { type: integer, format: int64 }
        ownerId: { type: integer, format: int64 }
        name: { type: string }
        description: { type: string }
        address: { type: string }
        city: { type: string }
        country: { type: string }
        latitude: { type: number, format: double }
        longitude: { type: number, format: double }
        phone: { type: string }
        website: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    NightclubCreateInput:
      type: object
      required: [name, city, country]
      properties:
        name: { type: string }
        description: { type: string }
        address: { type: string }
        city: { type: string }
        country: { type: string }
        latitude: { type: number, format: double }
        longitude: { type: number, format: double }
        phone: { type: string }
        website: { type: string }

    NightclubUpdateInput:
      type: object
      properties:
        name: { type: string }
        description: { type: string }
        address: { type: string }
        city: { type: string }
        country: { type: string }
        phone: { type: string }
        website: { type: string }

    NightclubRule:
      type: object
      properties:
        nightclubId: { type: integer, format: int64 }
        allowMaleOnly: { type: boolean }
        minWomenRatio: { type: number, format: float, example: 0.3 }
        maxPeoplePerTable: { type: integer }
        dynamicPricing: { type: boolean }

    NightclubRuleUpdateInput:
      type: object
      properties:
        allowMaleOnly: { type: boolean }
        minWomenRatio: { type: number, format: float }
        maxPeoplePerTable: { type: integer }
        dynamicPricing: { type: boolean }

    NightclubOpeningHour:
      type: object
      properties:
        id: { type: integer, format: int64 }
        nightclubId: { type: integer, format: int64 }
        dayOfWeek: { type: integer, minimum: 0, maximum: 6 }
        openTime: { type: string, format: time }
        closeTime: { type: string, format: time }

    NightclubOpeningHourInput:
      type: object
      required: [dayOfWeek]
      properties:
        dayOfWeek: { type: integer, minimum: 0, maximum: 6 }
        openTime: { type: string, format: time }
        closeTime: { type: string, format: time }

    Table:
      type: object
      properties:
        id: { type: integer, format: int64 }
        nightclubId: { type: integer, format: int64 }
        number: { type: integer }
        capacity: { type: integer }
        minSpend: { type: integer, description: Montant en centimes }
        positionX: { type: integer }
        positionY: { type: integer }
        rotation: { type: integer }
        status:
          type: string
          enum: [available, reserved, disabled]
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    TableCreateInput:
      type: object
      required: [number, capacity]
      properties:
        number: { type: integer }
        capacity: { type: integer }
        minSpend: { type: integer }
        positionX: { type: integer }
        positionY: { type: integer }
        rotation: { type: integer }
        status:
          type: string
          enum: [available, reserved, disabled]

    TableUpdateInput:
      type: object
      properties:
        capacity: { type: integer }
        minSpend: { type: integer }
        positionX: { type: integer }
        positionY: { type: integer }
        rotation: { type: integer }
        status:
          type: string
          enum: [available, reserved, disabled]

    ProductCategory:
      type: object
      properties:
        id: { type: integer, format: int64 }
        nightclubId: { type: integer, format: int64 }
        name: { type: string }
        description: { type: string }
        createdAt: { type: string, format: date-time }

    ProductCategoryCreateInput:
      type: object
      required: [name]
      properties:
        name: { type: string }
        description: { type: string }

    ProductCategoryUpdateInput:
      type: object
      properties:
        name: { type: string }
        description: { type: string }

    Product:
      type: object
      properties:
        id: { type: integer, format: int64 }
        nightclubId: { type: integer, format: int64 }
        categoryId: { type: integer, format: int64, nullable: true }
        name: { type: string }
        description: { type: string }
        price: { type: integer, description: Montant en centimes }
        imageUrl: { type: string }
        isAvailable: { type: boolean }
        isFeatured: { type: boolean }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    ProductCreateInput:
      type: object
      required: [name, price]
      properties:
        categoryId: { type: integer, format: int64, nullable: true }
        name: { type: string }
        description: { type: string }
        price: { type: integer }
        imageUrl: { type: string }
        isAvailable: { type: boolean, default: true }
        isFeatured: { type: boolean, default: false }

    ProductUpdateInput:
      type: object
      properties:
        categoryId: { type: integer, format: int64, nullable: true }
        name: { type: string }
        description: { type: string }
        price: { type: integer }
        imageUrl: { type: string }
        isAvailable: { type: boolean }
        isFeatured: { type: boolean }

    Reservation:
      type: object
      properties:
        id: { type: integer, format: int64 }
        nightclubId: { type: integer, format: int64 }
        userId: { type: integer, format: int64 }
        tableId: { type: integer, format: int64 }
        date: { type: string, format: date }
        arrivalTime: { type: string, format: time }
        guestCount: { type: integer }
        maleCount: { type: integer }
        femaleCount: { type: integer }
        amount: { type: integer, description: Montant en centimes }
        status:
          type: string
          enum: [pending, confirmed, to_finalize, cancelled, completed]
        note: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    ReservationCreateInput:
      type: object
      required: [nightclubId, userId, tableId, date, arrivalTime, guestCount]
      properties:
        nightclubId: { type: integer, format: int64 }
        userId: { type: integer, format: int64 }
        tableId: { type: integer, format: int64 }
        date: { type: string, format: date }
        arrivalTime: { type: string, format: time }
        guestCount: { type: integer }
        maleCount: { type: integer, default: 0 }
        femaleCount: { type: integer, default: 0 }
        amount: { type: integer, default: 0 }
        note: { type: string }
        items:
          type: array
          items: { $ref: '#/components/schemas/ReservationItemCreateInput' }

    ReservationUpdateInput:
      type: object
      properties:
        date: { type: string, format: date }
        arrivalTime: { type: string, format: time }
        guestCount: { type: integer }
        maleCount: { type: integer }
        femaleCount: { type: integer }
        note: { type: string }

    ReservationItem:
      type: object
      properties:
        id: { type: integer, format: int64 }
        reservationId: { type: integer, format: int64 }
        productId: { type: integer, format: int64 }
        quantity: { type: integer }
        unitPrice: { type: integer }
        totalPrice: { type: integer }
        createdAt: { type: string, format: date-time }

    ReservationItemCreateInput:
      type: object
      required: [productId, quantity, unitPrice]
      properties:
        productId: { type: integer, format: int64 }
        quantity: { type: integer, minimum: 1 }
        unitPrice: { type: integer }

    ReservationItemUpdateInput:
      type: object
      properties:
        quantity: { type: integer, minimum: 1 }

    ReservationGuest:
      type: object
      properties:
        id: { type: integer, format: int64 }
        reservationId: { type: integer, format: int64 }
        userId: { type: integer, format: int64, nullable: true }
        invitedBy: { type: integer, format: int64, nullable: true }
        phone: { type: string }
        status:
          type: string
          enum: [invited, accepted, declined, paid]
        amountDue: { type: integer }
        amountPaid: { type: integer }
        createdAt: { type: string, format: date-time }

    ReservationGuestCreateInput:
      type: object
      required: [phone]
      properties:
        userId: { type: integer, format: int64, nullable: true }
        phone: { type: string }
        amountDue: { type: integer, default: 0 }

    ReservationGuestUpdateInput:
      type: object
      properties:
        status:
          type: string
          enum: [invited, accepted, declined, paid]
        amountDue: { type: integer }
        amountPaid: { type: integer }

    Order:
      type: object
      properties:
        id: { type: integer, format: int64 }
        nightclubId: { type: integer, format: int64 }
        tableId: { type: integer, format: int64 }
        reservationId: { type: integer, format: int64, nullable: true }
        userId: { type: integer, format: int64, nullable: true }
        amount: { type: integer }
        status:
          type: string
          enum: [pending, preparing, served, paid, cancelled]
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    OrderCreateInput:
      type: object
      required: [nightclubId, tableId, items]
      properties:
        nightclubId: { type: integer, format: int64 }
        tableId: { type: integer, format: int64 }
        reservationId: { type: integer, format: int64, nullable: true }
        userId: { type: integer, format: int64, nullable: true }
        items:
          type: array
          items: { $ref: '#/components/schemas/OrderItemCreateInput' }

    OrderItem:
      type: object
      properties:
        id: { type: integer, format: int64 }
        orderId: { type: integer, format: int64 }
        productId: { type: integer, format: int64 }
        quantity: { type: integer }
        unitPrice: { type: integer }
        totalPrice: { type: integer }
        createdAt: { type: string, format: date-time }

    OrderItemCreateInput:
      type: object
      required: [productId, quantity, unitPrice]
      properties:
        productId: { type: integer, format: int64 }
        quantity: { type: integer, minimum: 1 }
        unitPrice: { type: integer }

    Payment:
      type: object
      properties:
        id: { type: integer, format: int64 }
        userId: { type: integer, format: int64, nullable: true }
        reservationId: { type: integer, format: int64, nullable: true }
        orderId: { type: integer, format: int64, nullable: true }
        amount: { type: integer }
        method:
          type: string
          enum: [card, apple_pay, google_pay, wallet]
        status:
          type: string
          enum: [pending, succeeded, failed]
        transactionRef: { type: string }
        createdAt: { type: string, format: date-time }

    PaymentCreateInput:
      type: object
      required: [amount, method]
      properties:
        userId: { type: integer, format: int64, nullable: true }
        reservationId: { type: integer, format: int64, nullable: true }
        orderId: { type: integer, format: int64, nullable: true }
        amount: { type: integer }
        method:
          type: string
          enum: [card, apple_pay, google_pay, wallet ]

    Notification:
      type: object
      properties:
        id: { type: integer, format: int64 }
        userId: { type: integer, format: int64 }
        type: { type: string }
        title: { type: string }
        message: { type: string }
        link: { type: string, nullable: true }
        isRead: { type: boolean }
        createdAt: { type: string, format: date-time }

